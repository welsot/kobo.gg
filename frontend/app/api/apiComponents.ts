/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import type * as Fetcher from './apiFetcher';
import { apiFetch } from './apiFetcher';
import type * as Schemas from './apiSchemas';

export type ApiGetInfoError = Fetcher.ErrorWrapper<undefined>;

export const apiGetInfo = (signal?: AbortSignal) =>
  apiFetch<undefined, ApiGetInfoError, undefined, {}, {}, {}>({
    url: '/api/v1/info',
    method: 'get',
    signal,
  });

export type ApiGetStaticError = Fetcher.ErrorWrapper<undefined>;

export const apiGetStatic = (signal?: AbortSignal) =>
  apiFetch<Schemas.StaticContentResponse, ApiGetStaticError, undefined, {}, {}, {}>({
    url: '/api/v1/static',
    method: 'get',
    signal,
  });

export type ApiPostChangeEmailError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 422;
      payload: Schemas.GenericErrorResponseRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostChangeEmailVariables = {
  body: Schemas.ChangeEmailRequest;
};

export const apiPostChangeEmail = (variables: ApiPostChangeEmailVariables, signal?: AbortSignal) =>
  apiFetch<undefined, ApiPostChangeEmailError, Schemas.ChangeEmailRequest, {}, {}, {}>({
    url: '/api/v1/change-email',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostChangeEmailConfirmationError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 422;
      payload: Schemas.GenericErrorResponseRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostChangeEmailConfirmationVariables = {
  body: Schemas.ChangeEmailConfirmationRequest;
};

export const apiPostChangeEmailConfirmation = (
  variables: ApiPostChangeEmailConfirmationVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    ApiPostChangeEmailConfirmationError,
    Schemas.ChangeEmailConfirmationRequest,
    {},
    {},
    {}
  >({
    url: '/api/v1/change-email-confirmation',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiGetMeError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Schemas.AuthRequiredErrorResponse;
}>;

export const apiGetMe = (signal?: AbortSignal) =>
  apiFetch<Schemas.UserInfoResponse, ApiGetMeError, undefined, {}, {}, {}>({
    url: '/api/v1/me',
    method: 'get',
    signal,
  });

export type ApiDeleteMeError = Fetcher.ErrorWrapper<{
  status: 500;
  payload: Schemas.ServerErrorRef;
}>;

export const apiDeleteMe = (signal?: AbortSignal) =>
  apiFetch<undefined, ApiDeleteMeError, undefined, {}, {}, {}>({
    url: '/api/v1/me',
    method: 'delete',
    signal,
  });

export type ApiGetEmailPrefsError = Fetcher.ErrorWrapper<undefined>;

export const apiGetEmailPrefs = (signal?: AbortSignal) =>
  apiFetch<Schemas.EmailPrefsResponse, ApiGetEmailPrefsError, undefined, {}, {}, {}>({
    url: '/api/v1/email-prefs',
    method: 'get',
    signal,
  });

export type ApiPostEmailPrefsError = Fetcher.ErrorWrapper<undefined>;

export type ApiPostEmailPrefsVariables = {
  body: Schemas.SetEmailPrefsRequest;
};

export const apiPostEmailPrefs = (variables: ApiPostEmailPrefsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.EmailPrefsResponse,
    ApiPostEmailPrefsError,
    Schemas.SetEmailPrefsRequest,
    {},
    {},
    {}
  >({ url: '/api/v1/email-prefs', method: 'post', ...variables, signal });

export type ApiPostUnsubscribeMarketingError = Fetcher.ErrorWrapper<undefined>;

export type ApiPostUnsubscribeMarketingVariables = {
  body: Schemas.UnsubscribeFromMarketingEmailsRequest;
};

export const apiPostUnsubscribeMarketing = (
  variables: ApiPostUnsubscribeMarketingVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.EmailPrefsResponse,
    ApiPostUnsubscribeMarketingError,
    Schemas.UnsubscribeFromMarketingEmailsRequest,
    {},
    {},
    {}
  >({
    url: '/api/v1/unsubscribe/marketing',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostUnsubscribeNotificationsError = Fetcher.ErrorWrapper<undefined>;

export type ApiPostUnsubscribeNotificationsVariables = {
  body: Schemas.UnsubscribeFromMarketingEmailsRequest;
};

export const apiPostUnsubscribeNotifications = (
  variables: ApiPostUnsubscribeNotificationsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.EmailPrefsResponse,
    ApiPostUnsubscribeNotificationsError,
    Schemas.UnsubscribeFromMarketingEmailsRequest,
    {},
    {},
    {}
  >({
    url: '/api/v1/unsubscribe/notifications',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostLoginError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 401;
      payload: Schemas.AuthRequiredErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostLoginVariables = {
  body: Schemas.LoginRequest;
};

export const apiPostLogin = (variables: ApiPostLoginVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.LoginSuccessResponse, ApiPostLoginError, Schemas.LoginRequest, {}, {}, {}>({
    url: '/api/v1/login',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostLogoutError = Fetcher.ErrorWrapper<undefined>;

export const apiPostLogout = (signal?: AbortSignal) =>
  apiFetch<undefined, ApiPostLogoutError, undefined, {}, {}, {}>({
    url: '/api/v1/logout',
    method: 'post',
    signal,
  });

export type ApiPostOtpError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 422;
      payload: Schemas.OtpErrorResponseRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostOtpVariables = {
  body: Schemas.OtpRequest;
};

export const apiPostOtp = (variables: ApiPostOtpVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.OtpSuccessResponse, ApiPostOtpError, Schemas.OtpRequest, {}, {}, {}>({
    url: '/api/v1/otp',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostVerifyEmailError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 422;
      payload: Schemas.GenericErrorResponseRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostVerifyEmailVariables = {
  body: Schemas.VerifyEmailRequest;
};

export const apiPostVerifyEmail = (variables: ApiPostVerifyEmailVariables, signal?: AbortSignal) =>
  apiFetch<undefined, ApiPostVerifyEmailError, Schemas.VerifyEmailRequest, {}, {}, {}>({
    url: '/api/v1/verify-email',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostDealOwnerRegistrationError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 422;
      payload: Schemas.RegistrationErrorResponseRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostDealOwnerRegistrationVariables = {
  body: Schemas.DealOwnerRegistrationRequest;
};

export const apiPostDealOwnerRegistration = (
  variables: ApiPostDealOwnerRegistrationVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.DealOwnerRegistrationSuccessResponse,
    ApiPostDealOwnerRegistrationError,
    Schemas.DealOwnerRegistrationRequest,
    {},
    {},
    {}
  >({
    url: '/api/v1/deal-owner/registration',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiGetDealByIdPathParams = {
  id: string;
};

export type ApiGetDealByIdError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiGetDealByIdVariables = {
  pathParams: ApiGetDealByIdPathParams;
};

export const apiGetDealById = (variables: ApiGetDealByIdVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.GetDealByIdResponse,
    ApiGetDealByIdError,
    undefined,
    {},
    {},
    ApiGetDealByIdPathParams
  >({ url: '/api/v1/deal/{id}', method: 'get', ...variables, signal });

export type ApiGetDealsError = Fetcher.ErrorWrapper<undefined>;

export const apiGetDeals = (signal?: AbortSignal) =>
  apiFetch<Schemas.GetUserDealsResponse, ApiGetDealsError, undefined, {}, {}, {}>({
    url: '/api/v1/deals',
    method: 'get',
    signal,
  });

export type ApiPostDealSaveError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ValidationErrorResponseRef;
}>;

export type ApiPostDealSaveVariables = {
  body: Schemas.SaveDealRequest;
};

export const apiPostDealSave = (variables: ApiPostDealSaveVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SaveDealSuccessResponse,
    ApiPostDealSaveError,
    Schemas.SaveDealRequest,
    {},
    {},
    {}
  >({ url: '/api/v1/deal/save', method: 'post', ...variables, signal });

export type ApiPostInvestorRegistrationError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 422;
      payload: Schemas.RegistrationErrorResponseRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostInvestorRegistrationVariables = {
  body: Schemas.InvestorRegistrationRequest;
};

export const apiPostInvestorRegistration = (
  variables: ApiPostInvestorRegistrationVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.InvestorRegistrationSuccessResponse,
    ApiPostInvestorRegistrationError,
    Schemas.InvestorRegistrationRequest,
    {},
    {},
    {}
  >({
    url: '/api/v1/investor/registration',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostInvestorDraftError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 401;
      payload: Schemas.AuthRequiredErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostInvestorDraftVariables = {
  body: Schemas.SaveInvestorProfileDraftRequest;
};

export const apiPostInvestorDraft = (
  variables: ApiPostInvestorDraftVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SaveInvestorProfileDraftSuccessResponse,
    ApiPostInvestorDraftError,
    Schemas.SaveInvestorProfileDraftRequest,
    {},
    {},
    {}
  >({ url: '/api/v1/investor/draft', method: 'post', ...variables, signal });

export type ApiPostInvestorVerificationError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 401;
      payload: Schemas.AuthRequiredErrorResponse;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostInvestorVerificationVariables = {
  body: Schemas.SaveInvestorProfileDraftRequest;
};

export const apiPostInvestorVerification = (
  variables: ApiPostInvestorVerificationVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SaveInvestorVerificationDataSuccessResponse,
    ApiPostInvestorVerificationError,
    Schemas.SaveInvestorProfileDraftRequest,
    {},
    {},
    {}
  >({
    url: '/api/v1/investor/verification',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiGetInvestorMandatesError = Fetcher.ErrorWrapper<undefined>;

export const apiGetInvestorMandates = (signal?: AbortSignal) =>
  apiFetch<Schemas.GetMandatesResponse, ApiGetInvestorMandatesError, undefined, {}, {}, {}>({
    url: '/api/v1/investor/mandates',
    method: 'get',
    signal,
  });

export type ApiGetMandateByIdPathParams = {
  id: string;
};

export type ApiGetMandateByIdError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiGetMandateByIdVariables = {
  pathParams: ApiGetMandateByIdPathParams;
};

export const apiGetMandateById = (variables: ApiGetMandateByIdVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.GetMandateByIdResponse,
    ApiGetMandateByIdError,
    undefined,
    {},
    {},
    ApiGetMandateByIdPathParams
  >({ url: '/api/v1/mandate/{id}', method: 'get', ...variables, signal });

export type ApiGetMandatesError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export const apiGetMandates = (signal?: AbortSignal) =>
  apiFetch<Schemas.GetPublicMandatesResponse, ApiGetMandatesError, undefined, {}, {}, {}>({
    url: '/api/v1/mandates',
    method: 'get',
    signal,
  });

export type ApiGetMandateByIdPublicPathParams = {
  id: string;
};

export type ApiGetMandateByIdPublicError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiGetMandateByIdPublicVariables = {
  pathParams: ApiGetMandateByIdPublicPathParams;
};

export const apiGetMandateByIdPublic = (
  variables: ApiGetMandateByIdPublicVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GetPublicMandateByIdResponse,
    ApiGetMandateByIdPublicError,
    undefined,
    {},
    {},
    ApiGetMandateByIdPublicPathParams
  >({
    url: '/api/v1/mandate/{id}/public',
    method: 'get',
    ...variables,
    signal,
  });

export type ApiPostMandateSaveError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 401;
      payload: Schemas.AuthRequiredErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostMandateSaveVariables = {
  body: Schemas.SaveMandateDraftRequest;
};

export const apiPostMandateSave = (variables: ApiPostMandateSaveVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SaveMandateSuccessResponse,
    ApiPostMandateSaveError,
    Schemas.SaveMandateDraftRequest,
    {},
    {},
    {}
  >({ url: '/api/v1/mandate/save', method: 'post', ...variables, signal });

export type ApiPostMandateDraftError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ValidationErrorResponseRef;
    }
  | {
      status: 401;
      payload: Schemas.AuthRequiredErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostMandateDraftVariables = {
  body: Schemas.SaveMandateDraftRequest;
};

export const apiPostMandateDraft = (
  variables: ApiPostMandateDraftVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SaveMandateDraftSuccessResponse,
    ApiPostMandateDraftError,
    Schemas.SaveMandateDraftRequest,
    {},
    {},
    {}
  >({ url: '/api/v1/mandate/draft', method: 'post', ...variables, signal });

export type ApiGetCountriesError = Fetcher.ErrorWrapper<undefined>;

export const apiGetCountries = (signal?: AbortSignal) =>
  apiFetch<Schemas.CountriesResponse, ApiGetCountriesError, undefined, {}, {}, {}>({
    url: '/api/v1/countries',
    method: 'get',
    signal,
  });

export type ApiGetAdminDealsError = Fetcher.ErrorWrapper<undefined>;

export const apiGetAdminDeals = (signal?: AbortSignal) =>
  apiFetch<Schemas.AdminGetAllDealsResponse, ApiGetAdminDealsError, undefined, {}, {}, {}>({
    url: '/api/v1/admin/deals',
    method: 'get',
    signal,
  });

export type ApiGetAdminDealsByIdPathParams = {
  id: string;
};

export type ApiGetAdminDealsByIdError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiGetAdminDealsByIdVariables = {
  pathParams: ApiGetAdminDealsByIdPathParams;
};

export const apiGetAdminDealsById = (
  variables: ApiGetAdminDealsByIdVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AdminGetDealByIdResponse,
    ApiGetAdminDealsByIdError,
    undefined,
    {},
    {},
    ApiGetAdminDealsByIdPathParams
  >({ url: '/api/v1/admin/deals/{id}', method: 'get', ...variables, signal });

export type ApiPostAdminDealsByIdApprovePathParams = {
  id: string;
};

export type ApiPostAdminDealsByIdApproveError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostAdminDealsByIdApproveVariables = {
  pathParams: ApiPostAdminDealsByIdApprovePathParams;
};

export const apiPostAdminDealsByIdApprove = (
  variables: ApiPostAdminDealsByIdApproveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AdminGetDealByIdResponse,
    ApiPostAdminDealsByIdApproveError,
    undefined,
    {},
    {},
    ApiPostAdminDealsByIdApprovePathParams
  >({
    url: '/api/v1/admin/deals/{id}/approve',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostAdminDealsByIdMatchPathParams = {
  id: string;
};

export type ApiPostAdminDealsByIdMatchError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostAdminDealsByIdMatchVariables = {
  pathParams: ApiPostAdminDealsByIdMatchPathParams;
};

export const apiPostAdminDealsByIdMatch = (
  variables: ApiPostAdminDealsByIdMatchVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AdminGetDealByIdResponse,
    ApiPostAdminDealsByIdMatchError,
    undefined,
    {},
    {},
    ApiPostAdminDealsByIdMatchPathParams
  >({
    url: '/api/v1/admin/deals/{id}/match',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostAdminDealsByIdRejectPathParams = {
  id: string;
};

export type ApiPostAdminDealsByIdRejectError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostAdminDealsByIdRejectVariables = {
  pathParams: ApiPostAdminDealsByIdRejectPathParams;
};

export const apiPostAdminDealsByIdReject = (
  variables: ApiPostAdminDealsByIdRejectVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AdminGetDealByIdResponse,
    ApiPostAdminDealsByIdRejectError,
    undefined,
    {},
    {},
    ApiPostAdminDealsByIdRejectPathParams
  >({
    url: '/api/v1/admin/deals/{id}/reject',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiGetAdminInvestorsByIdPathParams = {
  id: string;
};

export type ApiGetAdminInvestorsByIdError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiGetAdminInvestorsByIdVariables = {
  pathParams: ApiGetAdminInvestorsByIdPathParams;
};

export const apiGetAdminInvestorsById = (
  variables: ApiGetAdminInvestorsByIdVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AdminGetInvestorByIdResponse,
    ApiGetAdminInvestorsByIdError,
    undefined,
    {},
    {},
    ApiGetAdminInvestorsByIdPathParams
  >({
    url: '/api/v1/admin/investors/{id}',
    method: 'get',
    ...variables,
    signal,
  });

export type ApiGetAdminInvestorsError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export const apiGetAdminInvestors = (signal?: AbortSignal) =>
  apiFetch<Schemas.AdminGetInvestorsResponse, ApiGetAdminInvestorsError, undefined, {}, {}, {}>({
    url: '/api/v1/admin/investors',
    method: 'get',
    signal,
  });

export type ApiPostAdminInvestorsByIdApprovePathParams = {
  id: string;
};

export type ApiPostAdminInvestorsByIdApproveError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostAdminInvestorsByIdApproveVariables = {
  pathParams: ApiPostAdminInvestorsByIdApprovePathParams;
};

export const apiPostAdminInvestorsByIdApprove = (
  variables: ApiPostAdminInvestorsByIdApproveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AdminGetInvestorByIdResponse,
    ApiPostAdminInvestorsByIdApproveError,
    undefined,
    {},
    {},
    ApiPostAdminInvestorsByIdApprovePathParams
  >({
    url: '/api/v1/admin/investors/{id}/approve',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostAdminInvestorsByIdRejectPathParams = {
  id: string;
};

export type ApiPostAdminInvestorsByIdRejectError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostAdminInvestorsByIdRejectVariables = {
  pathParams: ApiPostAdminInvestorsByIdRejectPathParams;
};

export const apiPostAdminInvestorsByIdReject = (
  variables: ApiPostAdminInvestorsByIdRejectVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AdminGetInvestorByIdResponse,
    ApiPostAdminInvestorsByIdRejectError,
    undefined,
    {},
    {},
    ApiPostAdminInvestorsByIdRejectPathParams
  >({
    url: '/api/v1/admin/investors/{id}/reject',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiGetAdminMandatesError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export const apiGetAdminMandates = (signal?: AbortSignal) =>
  apiFetch<Schemas.AdminGetAllMandatesResponse, ApiGetAdminMandatesError, undefined, {}, {}, {}>({
    url: '/api/v1/admin/mandates',
    method: 'get',
    signal,
  });

export type ApiPostAdminMandatesByIdApprovePathParams = {
  id: string;
};

export type ApiPostAdminMandatesByIdApproveError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostAdminMandatesByIdApproveVariables = {
  pathParams: ApiPostAdminMandatesByIdApprovePathParams;
};

export const apiPostAdminMandatesByIdApprove = (
  variables: ApiPostAdminMandatesByIdApproveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GetMandateByIdResponse,
    ApiPostAdminMandatesByIdApproveError,
    undefined,
    {},
    {},
    ApiPostAdminMandatesByIdApprovePathParams
  >({
    url: '/api/v1/admin/mandates/{id}/approve',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostAdminMandatesByIdDeclinePathParams = {
  id: string;
};

export type ApiPostAdminMandatesByIdDeclineError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.NotFoundErrorRef;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorRef;
    }
>;

export type ApiPostAdminMandatesByIdDeclineVariables = {
  pathParams: ApiPostAdminMandatesByIdDeclinePathParams;
};

export const apiPostAdminMandatesByIdDecline = (
  variables: ApiPostAdminMandatesByIdDeclineVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GetMandateByIdResponse,
    ApiPostAdminMandatesByIdDeclineError,
    undefined,
    {},
    {},
    ApiPostAdminMandatesByIdDeclinePathParams
  >({
    url: '/api/v1/admin/mandates/{id}/decline',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiPostAttachmentsError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Schemas.AuthRequiredErrorResponse;
}>;

export type ApiPostAttachmentsVariables = {
  body: Schemas.UploadAttachmentRequest;
};

export const apiPostAttachments = (variables: ApiPostAttachmentsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SignedUploadUrl,
    ApiPostAttachmentsError,
    Schemas.UploadAttachmentRequest,
    {},
    {},
    {}
  >({ url: '/api/v1/attachments', method: 'post', ...variables, signal });

export type ApiGetInitError = Fetcher.ErrorWrapper<undefined>;

export const apiGetInit = (signal?: AbortSignal) =>
  apiFetch<Schemas.GetInitResponse, ApiGetInitError, undefined, {}, {}, {}>({
    url: '/api/v1/init',
    method: 'get',
    signal,
  });

export type ApiPostTxtError = Fetcher.ErrorWrapper<undefined>;

export type ApiPostTxtVariables = {
  body: Schemas.TxtRequest;
};

export const apiPostTxt = (variables: ApiPostTxtVariables, signal?: AbortSignal) =>
  apiFetch<undefined, ApiPostTxtError, Schemas.TxtRequest, {}, {}, {}>({
    url: '/api/v1/txt',
    method: 'post',
    ...variables,
    signal,
  });

export type ApiDeleteTxtError = Fetcher.ErrorWrapper<undefined>;

export type ApiDeleteTxtVariables = {
  body: Schemas.TxtRequest;
};

export const apiDeleteTxt = (variables: ApiDeleteTxtVariables, signal?: AbortSignal) =>
  apiFetch<undefined, ApiDeleteTxtError, Schemas.TxtRequest, {}, {}, {}>({
    url: '/api/v1/txt',
    method: 'delete',
    ...variables,
    signal,
  });

export const operationsByTag = {
  auth: {
    apiPostChangeEmail,
    apiPostChangeEmailConfirmation,
    apiGetMe,
    apiDeleteMe,
    apiGetEmailPrefs,
    apiPostEmailPrefs,
    apiPostUnsubscribeMarketing,
    apiPostUnsubscribeNotifications,
    apiPostLogin,
    apiPostLogout,
    apiPostOtp,
    apiPostVerifyEmail,
  },
  mandatesIo: {
    apiPostDealOwnerRegistration,
    apiGetDealById,
    apiGetDeals,
    apiPostDealSave,
    apiPostInvestorRegistration,
    apiPostInvestorDraft,
    apiPostInvestorVerification,
    apiGetInvestorMandates,
    apiGetMandateById,
    apiGetMandates,
    apiGetMandateByIdPublic,
    apiPostMandateSave,
    apiPostMandateDraft,
  },
  location: { apiGetCountries },
  admin: {
    apiGetAdminDeals,
    apiGetAdminDealsById,
    apiPostAdminDealsByIdApprove,
    apiPostAdminDealsByIdMatch,
    apiPostAdminDealsByIdReject,
    apiGetAdminInvestorsById,
    apiGetAdminInvestors,
    apiPostAdminInvestorsByIdApprove,
    apiPostAdminInvestorsByIdReject,
    apiGetAdminMandates,
    apiPostAdminMandatesByIdApprove,
    apiPostAdminMandatesByIdDecline,
  },
  attachment: { apiPostAttachments },
  cms: { apiGetInit, apiPostTxt, apiDeleteTxt },
};
